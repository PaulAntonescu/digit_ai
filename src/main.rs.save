
use nalgebra::*;
use crate::model::MNIST;
use crate::model::NerualNetwork;
use std::fs;

mod model;

static FILE_PATH: &str = "/home/paul/Desktop/mnist_train.csv";

fn main() {
    let mut model = NerualNetwork {
        input_layer: SMatrix::<f64, 1, 784>::zeros(),
        h_weights1: SMatrix::<f64, 784, 20>::new_random().normalize(),
        h_layer:    SMatrix::<f64, 1, 20>::zeros(),
        h_weights2: SMatrix::<f64, 20, 10>::new_random().normalize(),
        output_layer: SMatrix::<f64, 1, 10>::zeros()
    };

    let mnist: Vec<MNIST> = load_minst();

    print!("{}", mnist[1].input);

    model.fit(&mnist, 5, 0.05);

    let x = model.predict(mnist[1].input);
    print!("{}", x);
}

fn load_minst() -> Vec<MNIST> {
    let mut mnist: Vec<MNIST> = Vec::new();
    let mut i = 0;
    for line in fs::read_to_string(FILE_PATH).unwrap().lines() {
        let line: Vec<f64> = line.split(",").map(|d: &str| d.parse::<f64>().unwrap()).collect();
        
        let mut y: Vec<f64> = Vec::new();
        line[1..].clone_into(&mut y);

        let mut x = SMatrix::<f64, 1, 10>::zeros();
        let label: usize = line[0] as usize;
        x[(0, label)] = 1.0;

        mnist.push(MNIST { input: (SMatrix::<f64, 1, 784>::from_vec(y).normalize()), expected: (x) });

        if i == 5000 { break; }
        i += 1;
        print!("{i}\n");
    }

    mnist
}

fn x() {
    let s2 = SMatrix::<f64, 784, 10>::new_random().normalize();

    let a: Matrix<i32, Dyn, Dyn, VecStorage<i32, Dyn, Dyn>> = 
        DMatrix::from_row_slice(2,3,&[1, 2, 3,
                                                        4, 5, 6]);
    let b = 
        DMatrix::from_row_slice(3,2,&[7, 8,
                                                        9, 10,
                                                        11, 12]);

    let xx = matrix![1, 2, 3];
    
    let x1 = matrix![1, 2, 3;
                                                        7, 8, 9;
                                                        10, 11, 12];

    let c = xx * x1;

    //println!("{}", s);
}
